name: Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build & Package All Components
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install build-essential and libpcap-dev on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential libpcap-dev
      
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y npcap
          choco install -y zip

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.3"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Prepare Folder Structure
        run: |
          mkdir -p control-station
          mkdir -p control-station/updater
          mkdir -p control-station/ethernet-view
        shell: bash

      ############################################
      # BACKEND BUILDS
      ############################################

      - name: Build backend for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -o control-station/backend ./backend/cmd

      - name: Build backend for Windows
        if: matrix.os == 'windows-latest'
        run: |
          GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go build -o control-station/backend.exe ./backend/cmd

      - name: Build backend for macOS
        if: matrix.os == 'macos-latest'
        run: |
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -o control-station/backend ./backend/cmd

      ############################################
      # UPDATER BUILDS
      ############################################

      - name: Build updater for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o control-station/updater/updater ./updater

      - name: Build updater for Windows
        if: matrix.os == 'windows-latest'
        run: |
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o control-station/updater/updater.exe ./updater

      - name: Build updater for macOS
        if: matrix.os == 'macos-latest'
        run: |
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o control-station/updater/updater ./updater

      ############################################
      # FRONTEND BUILDS
      ############################################

      - name: Install common-front dependencies
        working-directory: ./common-front
        run: npm install

      - name: Build common-front
        working-directory: ./common-front
        run: npm run build

      - name: Build control-station
        working-directory: ./control-station
        run: |
          npm install
          npm run build

      - name: Copy control-station static files
        run: |
          cp -r ./control-station/static/* ./control-station/ || true

      - name: Upload control-station artifact
        uses: actions/upload-artifact@v4
        with:
          name: control-station-${{ matrix.os }}
          path: ./control-station-*

      - name: Build ethernet-view
        working-directory: ./ethernet-view
        run: |
          npm install
          npm run build

      - name: Upload ethernet-view artifact
        uses: actions/upload-artifact@v4
        with:
          name: ethernet-view-${{ matrix.os }}
          path: ./ethernet-view/static/*

      ############################################
      # BUILD testadj
      ############################################

      - name: Bundle testadj.py for Linux/macOS
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile backend/cmd/testadj.py --distpath control-station/
          
      - name: Bundle testadj.py for Windows
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile backend/cmd/testadj.py --distpath control-station/ --name testadj.exe

      ############################################
      # PACKAGE METADATA
      ############################################

      - name: Copy additional files
        run: |
          cp backend/cmd/config.toml control-station/
          cp backend/cmd/VERSION.md control-station/
          cp README.md control-station/

      - name: Download control-station artifact
        uses: actions/download-artifact@v4
        with:
          name: control-station-${{ matrix.os }}
          path: ./control-station/

      - name: Ensure ethernet-view directory exists
        run: mkdir -p ./control-station/ethernet-view

      - name: Download ethernet-view artifact
        uses: actions/download-artifact@v4
        with:
          name: ethernet-view-${{ matrix.os }}
          path: ./control-station/ethernet-view/

      - name: Create Linux ZIP
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release-zips
          cd control-station && zip -r ../release-zips/control-station-linux-x64.zip .
        
      - name: Create macOS x64 ZIP
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p release-zips
          cd control-station && zip -r ../release-zips/control-station-macos-x64.zip .
          
      - name: Create macOS ARM ZIP (on x64 runner)
        if: matrix.os == 'macos-latest'
        run: |
          # Build ARM version specifically for this ZIP
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -o control-station/backend ./backend/cmd
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -o control-station/updater/updater ./updater
          cd control-station && zip -r ../release-zips/control-station-macos-arm.zip .
          
      - name: Create Windows ZIP
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p release-zips
          cd control-station && zip -r ../release-zips/control-station-windows-x64.zip .

      ############################################
      # CREATE DRAFT RELEASE
      ############################################

      - name: Create Draft GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ github.run_number }}"
          name: "Draft Release v${{ github.run_number }}"
          draft: true
          files: release-zips/control-station-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
